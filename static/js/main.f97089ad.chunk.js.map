{"version":3,"sources":["components/Panel.js","components/AddPerson.js","components/App.js","serviceWorker.js","index.js"],"names":["Panel","props","className","src","picture","alt","title","name","mail","AddPerson","onClick","onclick","App","state","data","handleClickAddPerson","fetch","then","response","ok","json","result","setState","prevState","concat","results","catch","console","log","handleClick","tab","this","map","oneData","index","key","email","last","large","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qSAgBeA,G,MAbD,SAACC,GACb,OACE,oCACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKF,EAAMG,QAASC,IAAKJ,EAAMG,UACpC,4BACGH,EAAMK,MADT,IACiBL,EAAMM,MAEvB,2BAAIN,EAAMO,UCNHC,G,MAHG,SAACR,GACjB,OAAO,4BAAQS,QAAST,EAAMU,SAAvB,sBCsEMC,E,4MAlEbC,MAAQ,CACNC,KAAM,I,EAERC,qBAAuB,WACrBC,MAAM,wCACHC,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBH,MAAK,SAACI,GACL,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BT,KAAMS,EAAUT,KAAKU,OAAOH,EAAOI,gBAGtCC,OAAM,kBACLC,QAAQC,IACN,kF,EAMRC,YAAc,WACZb,MAAM,wCACHC,MAAK,SAACC,GACL,GAAIA,EAASC,GACX,OAAOD,EAASE,UAGnBH,MAAK,SAACI,GACL,EAAKC,SAAS,CACZR,KAAMO,EAAOI,aAIhBC,OAAM,kBACLC,QAAQC,IACN,kF,uDAQN,IAAIE,EAAMC,KAAKlB,MAAMC,KAAKkB,KAAI,SAACC,EAASC,GAAV,OAC5B,kBAAC,EAAD,CACEC,IAAKD,EACL1B,KAAMyB,EAAQG,MACd7B,KAAM0B,EAAQ1B,KAAK8B,KACnB/B,MAAO2B,EAAQ1B,KAAKD,MACpBF,QAAS6B,EAAQ7B,QAAQkC,WAI7B,OACE,yBAAKpC,UAAU,OAEb,kBAAC,EAAD,CAAWS,QAASoB,KAAKhB,uBACxBe,O,GA7DSS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.f97089ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Panel.css\";\r\n\r\nconst Panel = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"border\">\r\n        <img src={props.picture} alt={props.picture} />\r\n        <h1>\r\n          {props.title} {props.name}\r\n        </h1>\r\n        <p>{props.mail}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Panel;\r\n","import React from \"react\";\r\n\r\nconst AddPerson = (props) => {\r\n  return <button onClick={props.onclick}>Dodaj osobę</button>;\r\n};\r\nexport default AddPerson;\r\n","import React, { Component } from \"react\";\n// import Button from \"./Button\";\nimport Panel from \"./Panel\";\nimport \"./App.css\";\nimport AddPerson from \"./AddPerson\";\n\nclass App extends Component {\n  state = {\n    data: [],\n  };\n  handleClickAddPerson = () => {\n    fetch(\"https://randomuser.me/api/?results=1\")\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n      })\n      .then((result) => {\n        this.setState((prevState) => ({\n          data: prevState.data.concat(result.results),\n        }));\n      })\n      .catch(() =>\n        console.log(\n          \"Can’t access \" +\n            \"https://randomuser.me/api/\" +\n            \" response. Blocked by browser?\"\n        )\n      );\n  };\n  handleClick = () => {\n    fetch(\"https://randomuser.me/api/?results=5\")\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n      })\n      .then((result) => {\n        this.setState({\n          data: result.results,\n        });\n        // console.log();\n      })\n      .catch(() =>\n        console.log(\n          \"Can’t access \" +\n            \"https://randomuser.me/api/\" +\n            \" response. Blocked by browser?\"\n        )\n      );\n  };\n\n  render() {\n    let tab = this.state.data.map((oneData, index) => (\n      <Panel\n        key={index}\n        mail={oneData.email}\n        name={oneData.name.last}\n        title={oneData.name.title}\n        picture={oneData.picture.large}\n      />\n    ));\n\n    return (\n      <div className=\"App\">\n        {/* <Button onclick={this.handleClick} /> */}\n        <AddPerson onclick={this.handleClickAddPerson} />\n        {tab}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}